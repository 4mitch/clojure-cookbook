=== Conventions Used in This Book

Being a book full of solutions, you'll find no shortage of Clojure
source code in the book. Clojure source code appears in a monospace
font, like this:

[source,clojure]
----
(defn add
  [x y]
  (+ x y))
----

When a Clojure expression is evaluated for a return value, that value
is denoted with a comment followed by an arrow, much like it would
appear on the command line:

[source,clojure]
----
(add 1 2)
;; -> 3
----

Where appropriate, code samples may omit or ellipsize return value
comments. The two most common places you'll see this are when defining
a function/var or shortening lengthy output.

[source,clojure]
----
;; This would return #'user/one, but do you really care?
(def one 1)

(into [] (range 1 20))
;; -> [1 2 ... 20]
----

When an expression produces output to +STDOUT+ or +STDERR+ it is
denoted by a comment (`*out*` and `*error*`, respectively), followed
by a comment with each line of output.

[source,clojure]
----
(do (println "Hello!")
    (println "Goodbye!"))
;; -> nil
;; *out*
;; Hello!
;; Goodbye!
----

==== REPL Sessions

Seeing that _REPL-driven Development_ is in vogue at present, it
follows that this be a REPL-driven book. REPLs (Read-Eval-Print Loops)
are interactive prompts that evaluate expressions and print their
results. The Bash prompt, +irb+, and the +python+ prompt are examples
of REPLs. Nearly every recipe in this book is designed to be run at a
Clojure REPL.

While Clojure REPLs are traditionally displayed as `user=> ...`, this
book aims for readers to be able to copy-paste all of the examples in
a recipe and see the indicated results. As such, samples omit `user=>`
and comment-out any output to make things easier. This is especially
helpful if you're following along on a computer; You can blindly
copy-paste code samples without worrying about trying to run non-code.

When an example is *only* relevant in the context of a REPL, we will
retain the traditional REPL style (with `user=>`). What follows is an
example of each, a REPL-only sample and its simplified version.

.REPL-only
[source,shell-session]
----
user=> (+ 1 2)
3
user=> (println "Hello!")
Hello!
nil
----

.Simplified
[source,clojure]
----
(+ 1 2)
;; -> 3

(println "Hello!")
;; *out*
;; Hello!
----


==== Console/Terminal Sessions

Console sessions (e.g. shell commands) are denoted by monospace font,
with lines beginning with a dollar sign (+$+) indicating a shell
prompt. Output is printed without a leading "+$+".

A backslash (+\+) at the end of a command indicates to the console that the
command continues on the next line.

[source,shell-session]
----
$ lein version
Leiningen 2.0.0-preview10 on Java 1.6.0_29 Java HotSpot(TM) 64-Bit Server VM
----

[[sec_lein_try]]
.Our Golden Boy, +lein-try+
****
Clojure is not known for its extensive standard library. Unlike
languages like Perl or Ruby, Clojure's standard library is
comparatively small; Clojure chose _simplicity_ and _power_ instead.
As such, Clojure is a language full of libraries, not built-ins (well,
except for Java...)

Since so many of the solutions in this book rely on third-party
libraries, we developed
https://github.com/rkneufeld/lein-try[+lein-try+]. +lein-try+ is a small
plugin for http://leiningen.org/[Leiningen], Clojure's de facto
project tool, that lets you quickly and easily try out various Clojure
libraries.

To use +lein-try+, ensure you have Leiningen installed, then edit your
user profile as follows:

.~/.lein/profiles.clj
[source,clojure]
----
{:user {:plugins [[lein-try "0.4.1"]]}}
----

Now, inside of a project or out, you can use the *+lein try+* command
to launch a REPL with access to whichever library you please.

[source,shell-session]
----
$ lein try clj-time
#...
user=>
----

Long story short: Where possible, you'll see instructions on which
+lein-try+ command to execute above recipes that use third-party
libraries. You'll find an example of trying recipes with +lein-try+ in
<<sec_try_library>>.

If a recipe *cannot* be run via +lein-try+ we have made efforts to
include adequate instructions on how to run that recipe on your local
machine.
****

==== Typesetting Conventions

The following typographic conventions are used in this book:

// These conventions *roughly* follow standards layed out as the O'Reilly
// standard.

*Bold*::
  is used to emphasize a word or phrase.
_Italic_::
  is used for URLs, filenames, and file extensions. New terms are also
  italicized when they first appear in the text.
+Constant Width+::
  is used for function and method names and their arguments; in
  examples to show both input and output; and in regular text to show
  literal code.
*+Constant Width Bold+*::
  is used to indicate commands that you should enter literally at the
  command-line.

The names of libraries follow one of two conventions: libraries with proper
names are displayed in capitalized plain text (e.g. "Hiccup" or "Swing"), while
libraries with names meant to mimic code symbols are displayed in constant
width text (e.g. +core.async+ or +clj-commons-exec+).

[TIP]
====
This element signifies a tip, suggestion, or general note.
====

[WARNING]
====
This element indicates a warning or caution.
====

=== Using Code Examples
++++
<remark>PROD: Please reach out to author to find out if they will be uploading code examples to oreilly.com or their own site (e.g., GitHub). If there is no code download, delete this whole section. If there is, when you email digidist with the link, let them know what you filled in for title_title (should be as close to book title as possible, i.e., learning_python_2e). This info will determine where digidist loads the files.</remark>
++++

Supplemental material (code examples, exercises, etc.) is available for download at link:$$https://github.com/oreillymedia/title_title$$[].

This book is here to help you get your job done. In general, if example code is offered with this book, you may use it in your programs and documentation. You do not need to contact us for permission unless you’re reproducing a significant portion of the code. For example, writing a program that uses several chunks of code from this book does not require permission. Selling or distributing a CD-ROM of examples from O’Reilly books does require permission. Answering a question by citing this book and quoting example code does not require permission. Incorporating a significant amount of example code from this book into your product’s documentation does require permission.

We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher, and ISBN. For example: “_Book Title_ by Some Author (O’Reilly). Copyright 2012 Some Copyright Holder, 978-0-596-xxxx-x.”

If you feel your use of code examples falls outside fair use or the permission given above, feel free to contact us at pass:[<email>permissions@oreilly.com</email>].

=== Safari® Books Online

[role = "safarienabled"]
[NOTE]
====
pass:[<ulink role="orm:hideurl:ital" url="http://my.safaribooksonline.com/?portal=oreilly">Safari Books Online</ulink>] is an on-demand digital library that delivers expert pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/content">content</ulink>] in both book and video form from the world&#8217;s leading authors in technology and business.
====

Technology professionals, software developers, web designers, and business and creative professionals use Safari Books Online as their primary resource for research, problem solving, learning, and certification training.

Safari Books Online offers a range of pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/subscriptions">product mixes</ulink>] and pricing programs for pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/organizations-teams">organizations</ulink>], pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/government">government agencies</ulink>], and pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/individuals">individuals</ulink>]. Subscribers have access to thousands of books, training videos, and prepublication manuscripts in one fully searchable database from publishers like O’Reilly Media, Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que, Peachpit Press, Focal Press, Cisco Press, John Wiley & Sons, Syngress, Morgan Kaufmann, IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders, McGraw-Hill, Jones & Bartlett, Course Technology, and dozens pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/publishers">more</ulink>]. For more information about Safari Books Online, please visit us pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/">online</ulink>].

=== How to Contact Us

Please address comments and questions concerning this book to the publisher:

++++
<simplelist>
<member>O’Reilly Media, Inc.</member>
<member>1005 Gravenstein Highway North</member>
<member>Sebastopol, CA 95472</member>
<member>800-998-9938 (in the United States or Canada)</member>
<member>707-829-0515 (international or local)</member>
<member>707-829-0104 (fax)</member>
</simplelist>
++++

We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at link:$$http://www.oreilly.com/catalog/<catalog page>$$[].

++++
<remark>Don't forget to update the link above.</remark>
++++

To comment or ask technical questions about this book, send email to pass:[<email>bookquestions@oreilly.com</email>].

For more information about our books, courses, conferences, and news, see our website at link:$$http://www.oreilly.com$$[].

Find us on Facebook: link:$$http://facebook.com/oreilly$$[]

Follow us on Twitter: link:$$http://twitter.com/oreillymedia$$[]

Watch us on YouTube: link:$$http://www.youtube.com/oreillymedia$$[]

=== Acknowledgments

++++
<remark>Fill in...</remark>
++++
