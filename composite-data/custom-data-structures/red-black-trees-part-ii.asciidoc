[[sec_red_black_part_ii]]
=== Implementing custom data structures: Red-Black Trees - Part II
[role="byline"]
originally submitted by Leonardo Borges

==== Problem

You want to use Clojure's core sequence functions (+conj+, +map+,
+filter+, etc.) with your own custom data structure.

==== Solution

In Part I of this recipe (<<sec_red_black_part_i>>) you implemented
all the functions necessary for creating an efficient Red-Black Tree.

What's missing is participation in Clojure's sequence abstractions.


The most important part of participating in the sequence abstraction
is the ability to expose values of a data structure sequently. The
built-in +tree-seq+ is well suited for this task. One extra step is
needed, however; +tree-seq+ returns a sequence of nodes, not values.
The final +rb-tree->seq+ function 

[source,clojure]
----
(defn- rb-tree->tree-seq
  "Returns a seq of all nodes in an red-black tree."
  [rb-tree]
  (tree-seq sequential? (fn [[_ left _ right]]
                          (remove nil? [left right]))
            rb-tree))

(defn rb-tree->seq
  "Convert a red-black tree to a seq of its values."
  [rb-tree]
  (map (fn [[_ _ val _]] val) (rb-tree->tree-seq rb-tree)))

(rb-tree->seq (-> nil
                  (insert-val 5)
                  (insert-val 2)))
;; -> (5 2)
----

There is one ability RBTs have that sequences do not: their ability to
+find+ values efficiently. Define a protocol +IRedBlackTree+ to
capture this ability for extension in the realized type.

[source,clojure]
----
(defprotocol IRedBlackTree
  "RedBlackTree public API functions"
    (find [this x] "Test if a value is present in an RBT))
----

Now, extend the +ISeq+ and +IRedBlackTree+ protocols to a new
+RedBlackTree+ type, implementing all of the necessary functions. It's
also wise to implement the multimethod +print-method+ for
+RedBlackTree+, as the default implementation will fail for
+RedBlackTree+ as implemented.

[source,clojure]
----
(deftype RedBlackTree [tree]
  IRedBlackTree
  (find [this n] (find-val tree n))
  clojure.lang.ISeq
  (cons [self v] (->RedBlackTree (insert-val tree v)))
  (empty [self] (->RedBlackTree nil))
  (equiv [self o] (if (instance? RedBlackTree o)
                    (= tree (.tree o))
                    false))
  (first [this] (first (rb-tree->seq tree)))
  (next [this] (next (rb-tree->seq tree)))
  (more [this] (rest (rb-tree->seq tree)))
  (seq [this] (if tree (rb-tree->seq tree)))
  Object
  (toString [this] (pr-str this)))

(defmethod print-method RedBlackTree [o ^java.io.Writer w]
  (.write w (str "#rbt " (pr-str (.tree o)))))
----

It is now possible to use a +RedBlackTree+ instance like any other
collection.

[source, clojure]
----
(into (->RedBlackTree nil) (range 2))
;; -> #rbt [:black nil 0 [:red nil 1 nil]]

(def to-ten (into (->RedBlackTree nil) (range 10)))

(seq to-ten)
;; -> (3 1 0 2 5 4 7 6 8 9)

(find to-ten 9)
;; -> 9

(find to-ten 15)
;; -> nil
----

==== Discussions

In the end, it doesn't take a lot to participate in the sequence
abstraction. By implementing a small handful of interface functions, the
Red-Black Tree implementation from <<sec_red_black_part_i>> can
participate in a wide-array of sequence-oriented functions; +map+,
+filter+, +reduce+, you name it. 

At its essence, +ISeq+ is an abstraction over a data structure that
views its underlying values as a _list_. A list is traditionally
represented by two parts: its head, a single value and "rest," either
another list or nothing. Nearly every collection manipulating function
in Clojure builds off of this abstraction.

The sequence abstraction lives in the +clojure.lang.ISeq+ java
interface, along with its parents +clojure.lang.IPersistentCollection+
and +clojure.lang.Seqable+. Most of the functions are self
explanatory, but some deserve further explanation. The function +cons+ is a
historical name for constructing a new list by appending a value to an
existing list. +seq+ is intended to produce a sequence from a
collection, or +nil+ if empty.

.ISeq.java
[source,java]
----
public interface ISeq extends IPersistentCollection {
  Object first();
  ISeq next();
  ISeq more();
  ISeq cons(Object o);
}
----

.IPersistentCollection.java
[source,java]
----
public interface IPersistentCollection extends Seqable {
  int count();
  IPersistentCollection cons(Object o);
  IPersistentCollection empty();
  boolean equiv(Object o);
}
----

.Seqable.java
[source,java]
----
public interface Seqable {
  ISeq seq();
}
----

The most challenging part of any +ISeq+ implementation is actually
making a sequence out of the underlying data structure. This would be
particularly challenging if you needed to write your own lazy
tree-traversal algorithms. Luckily Clojure has a built-in function
+tree-seq+ that does precisely this. By leveraging +tree-seq+ to
produce a sequence of nodes, it is trivial to write a +rb-tree->seq+
conversion function that lazily traverses a RBT yielding node-values
as it goes.

+tree-seq+ accepts three arguments:

* +branch?+ - a conditional that returns true if a node is a branch
  (not a leaf node). For RBT, +sequential?+ is an adequate check, as
  every node is a vector.
* +children+ - a function that returns all of the children for a given
  node.
* +root+ - the node to begin traversal on.

[NOTE]
++++
+tree-seq+ performs a depth-first traversal of trees. Given how
Red-Black Trees are represented, this will *not* be an ordered
traversal.
++++

With a sequence in hand, it is easy enough to implement +first+,
+next+, +more+ and +seq+. Similarly +cons+ and +empty+ are easy enough
to write too. Equality testing can be a bit more difficult, however.

For the sake of simplicity, we chose to implement equality (+equiv+)
between *only* +RedBlackTree+ instances. Further, the implementation
compares a sorted sequence of their elements. In this case, +equiv+ is
answering the question "do these trees have the same values?" and not
the question "are these the same trees?" It's an important
distinction, one you'll need to consider carefully when implementing
your own data structures. 

Even with the full +ISeq+ interface implemented, there are still a
number of conveniences +RedBlackTree+ is lacking. For one, you need to
use the kludgy +->RedBlackTree+ function to create a new RBT and add
values to it manually. By convention, many built-in collections
provide convenience functions for populating them (aside from literal
tags like `[]` or +{}+, of course). It's easy enough to mirror +vec+
and +vector+ for RBTs:

[source,clojure]
----
(defn rbt
 "Create a new RedBlackTree with the contents of coll."
 [coll]
 (into (->RedBlackTree nil) coll))

(defn red-black-tree
  "Creates a new RedBlackTree containing the args."
  [& args]
  (rbt args))

(rbt (range 3))
;; -> #rbt [:black [:black nil 0 nil] 1 [:black nil 2 nil]]

(red-black-tree 7 42)
;; -> #rbt [:black nil 7 [:red nil 42 nil]]
----

You may also have noticed printing is not a concern of the sequence
abstraction, although it is certainly an important consideration to
make for developing developer (and machine) friendly data structures.
There are two types of printing in Clojure: +toString+ and +pr+-based
printing. The +toString+ function is intended for printing
human-readable values at the REPL, while the +pr+ family of functions
are meant (more or less) to be readable by the Clojure reader.

To provide our own readable representation of RBT we must implement
+print-method+ (the heart of +pr+) for the +RedBlackTree+ type. By
writing in a "tagged literal" format (e.g. +#rbt+) it is possible to
configure the reader to ingest and hydrate written values as
first-class objects.

[source,clojure]
----
(require '[clojure.edn :as edn])

;; Recall ...
(defmethod print-method RedBlackTree [o ^java.io.Writer w]
  (.write w (str "#rbt " (pr-str (.tree o)))))

(def rbt-string (pr-str (rbt [1 4 2])))
rbt-string
;; -> "#rbt [:black [:black nil 1 nil] 2 [:black nil 4 nil]]"

(edn/read-string rbt-string)
;; -> RuntimeException No reader function for tag rbt ...

(edn/read-string {:readers {'rbt ->RedBlackTree}}
                 rbt-string)
;; -> #rbt [:black [:black nil 1 nil] 2 [:black nil 4 nil]]
----

==== See Also

* <<sec_red_black_part_i>>, the first of this two part recipe on
  Red-Black Trees.
* See <<sec_local_io_clojure_data_to_disk>> and
  <<sec_default_data_reader>> for more information on reading Clojure
  data.
