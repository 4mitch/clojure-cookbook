=== Working with SQL in Korma
[role="byline"]
by Dmitri Sotnikov and Chris Allen

==== Problem

You want to work with data stored in a relational database without
writing SQL by hand.

==== Solution

Use Korma as a DSL for generating SQL queries and traversing
relationships.

First, fire up a fresh Leiningen project with Korma (the SQL library)
and PostgreSQL as dependencies.

[NOTE]
====
You'll need a running SQL database and existing table to connect to
for this recipe. We suggest PostgreSQL.

If you're a Mac user and don't have PostgreSQL installed yet, you can
go here http://postgresapp.com/ for an easy to use DMG.

After you have PostgreSQL running (presumably on _localhost:5432_) run the following
command to create a database for this recipe:

[source,bash]
----
$ /Applications/Postgres.app/Contents/MacOS/bin/createdb learn_korma;
----
====

Before starting, add `[korma "0.3.0-RC6"]` and
`[org.postgresql/postgresql "9.2-1002-jdbc4"]` to your project's
dependencies or start a REPL using lein-try:

[source,shell]
----
$ lein try korma org.postgresql/postgresql
----

Next, define a database connection. Korma uses c3p0 to create pooled
connections.

[source,clojure]
----
;; While we don't normally suggest :refer :all, Korma is a rather
;; large DSL
(require '[korma.db :refer :all])

(defdb db
  (postgres {:db "learn_korma"}))
----

Next, define and create some entities. Entities represent individual
tables in your database. Here you'll define an entity for blog posts:

[source,clojure]
----
(defentity posts
  (pk :id)
  (table :posts) ; Table name
  (entity-fields :title :content)) ; Default fields to SELECT

;; serial is the default Postgres type for autoincrementing integer primary keys
(def create-posts (str "CREATE TABLE posts "
                       "(id serial, title text, content text,"
                       "created_on timestamp default current_timestamp);"))

;; Korma function to exec raw SQL, should only be used where strictly necessary.
(exec-raw create-posts)
----

Normally you'd use a proper migration library for your schema, but
we'll keep things simple for the sake of demonstration.

You can use +insert+ to add records to the database. Each record is
represented by a map. The names of the keys in the map must match the
names of the columns in the database.

[source,clojure]
----
(insert posts
        (values {:title "First post" :content "blah blah blah"}))
----

You can then query the data using +select+. If the query is successful a
sequence of maps will be returned. Each map will contain keys representing
the column names.

[source,clojure]
----
(select posts (limit 1))
;; -> [{:created_on #inst "2013-11-01T19:21:10.652920000-00:00",
;;      :content "blah blah blah",
;;      :title "First post",
;;      :id 1}]
----

You can update existing records using +update+:

[source,clojure]
----
(update posts
        (set-fields {:title "Best Post"})
        (where {:title "First post"}))
;; -> {:title "Best Post", :id 1 ...}
----

Deleting records is done using +delete+:

[source,clojure]
----
(delete posts
        (where {:title "Best Post"}))

(select posts)
;; -> []
----

==== Discussion

Korma provides a simple and intuitive way to construct SQL queries
from Clojure. The advantage of using Korma is that the queries are
written as regular code instead of SQL strings. You can easily compose
queries together and abstract common operations.

Korma provides many additional features in addition to those you saw
above. Let's examine some of these below.

One convenience feature Korma provides is default connections. When
only a single connection is defined it will be used by default and you
don't have to pass it in explicitly. That said, it is also possible to
define multiple connections and pass them explicitly.

When defining entities with +defentity+ you can pass in a number of
options. These include +table+ to specify the table name directly,
+pk+ for the relations default ID field (primary key), +entity-fields+
for default fields for SELECTs, and +db+ for which database the entity
belongs in.

You can also define entity relations using the +has-one+, +has-many+,
+belongs-to+ and +many-to-many+:

[source,clojure]
----
(defentity orders
  ;; order is a reserved name in korma and H2.
  (table :orders))

(defentity billable
  (table :billable))

(defentity address
  (table :address))

(defentity phone
  (table :phone))

(defentity customer
  ;; Specify which database directly, using the one you defined earlier
  ;; (database db)

  (table :customer)

  ;; By default assumed id as a primary key
  ;; produces query:
  ;; "customer.id = address.customer_id"
  (has-one address)
  (has-many phone)

  ;; You can override the default foreign key
  ;; name by using :fk as seen below
  (belongs-to billable {:fk :cust_id})
  (many-to-many orders :customer_orders))


(def create-orders
  (str "CREATE TABLE orders (id serial, billable_id int);"))

(def create-billable
  (str "CREATE TABLE billable (id serial, cust_id int, item text);"))

(def create-address
  (str "CREATE TABLE address (id serial, customer_id int, addy text, current boolean default true);"))

(def create-phone
  (str "CREATE TABLE phone (id serial, customer_id int, phone text);"))

(def create-customer
  (str "CREATE TABLE customer (id serial, name text, tentacles boolean, registered timestamp default current_timestamp);"))

(doseq [sql-cmd [create-orders create-billable create-address create-phone create-customer]]
  (exec-raw db sql-cmd))
----

Korma also allows us to create subselects using +korma.core/subselect+.

[source,clojure]
----
(defentity sub-customers
  (table (korma.core/subselect customer
                               (where :orders_pending))
         :customersWithOrders))
----

To more intimately examine Korma's querying abilities, create some
test data.

[source,clojure]
----
;; You can insert multiple rows by passing a vector to "values"
(insert customer
        (values [{:name "Dmitri"  :tentacles false}
                 {:name "Chris"   :tentacles false}
                 {:name "Brandy"  :tentacles false}
                 {:name "Cthulhu" :tentacles true}]))

(def dmitri  (first (select customer
                            (where {:name "Dmitri"}))))
(def chris   (first (select customer
                            (where {:name "Chris"}))))
(def brandy  (first (select customer
                            (where {:name "Brandy"}))))
(def cthulhu (first (select customer
                            (where {:name "Cthulhu"}))))

(insert billable
        (values {:cust_id (:id brandy) :item "Chainsaw for cutting down trees in the backyard"}))
(insert billable
        (values {:cust_id (:id dmitri) :item "Caviar"}))
(insert billable
        (values {:cust_id (:id chris) :item "Bottles of whiskey for bribery"}))
(insert address
        (values {:customer_id (:id chris) :addy "San Francisco!"}))
(insert address
        (values {:customer_id (:id dmitri) :addy "Elsewhere"}))
(insert address
        (values {:customer_id (:id brandy) :addy "San Francisco!"}))
----

Selection queries define all the common relational operations
such as +aggregate+, +join+, +order+, +group+ and +having+:

[source,clojure]
----
(select customer
        (fields [:tentacles])
        (group :tentacles))
;; -> [{:tentacles true} {:tentacles false}]
----

You can include results from other related entities using the +with+ clause:

[source,clojure]
----
(select customer
        (with address)
        (limit 1))
;; -> [{:current true,
;;      :addy "Elsewhere",
;;      :customer_id 1,
;;      :id_2 2,
;;      :registered #inst "2013-11-01T19:36:38.765727000-00:00",
;;      :tentacles false,
;;      :name "Dmitri",
;;      :id 1}]
----

Korma also allows doing manual joins using the +join+ clause.

[source,clojure]
----
(select customer
        (join address (= :address.customer_id :id))
        (limit 1))
;; -> ... <results as above>
----

The +subselect+ clause allows you to perform subselections inside of a
+where+ clause.

[source,clojure]
----
;; Performing a customer query where address is current.
(select customer
        (with address)
        (where {:address.id
                [in (subselect address
                               (fields :id)
                               (where {:current true}))]}))
----

Korma queries are composable

[source,clojure]
----
(-> (select* customer)
    (with address)
    select)
----

Queries can be further decorated using the +modifier+ clause:

[source,clojure]
----
(select customer
        (modifier "DISTINCT"))
----

SQL functions can be called using +sqlfn+ followed by the name and
optional parameters:

[source,clojure]
----
(select customer
        (where {:registered [<= (sqlfn now)]}))
----

When something can't be expressed in Korma you can use raw queries.

[source,clojure]
----
(exec-raw ["SELECT * FROM customer WHERE id = ?" [4]] :results)
----

It should also be noted that Korma can enable some rather nice query
composition based APIs:

[source,clojure]
----
(defn customers
  "Query statement for customers with addresses."
  []
  (-> (select* customer)
      (with address)))

(select (customers))
;; -> ... All customers

(defn constrainer
  "Return a function that constrains a field in a table by a value."
  [field]
  (fn [table value]
    (-> table
        (where {field value}))))

(def customer-fields [:tentacles :id :name :registered])

(def all-constrainers (map constrainer customer-fields))

(def constrain-tentacles (first all-constrainers))

(defn san-fran-residents [customers]
  (-> customers
      (where {:address.addy "San Francisco!"})))

(defn customers-with-tentacles []
  (-> (customers)
      (constrain-tentacles true)
      select))

(defn customers-without-tentacles []
  (-> (customers)
      (constrain-tentacles false)
      select))

(defn customers-without-tentacles-in-sf []
  (-> (customers)
      (constrain-tentacles false)
      (san-fran-residents)
      select))

(customers-without-tentacles-in-sf)
;; -> ... Everyone, but Cthulu, and Chris.
----

==== See Also

* For more information, see the official http://sqlkorma.com/docs[Korma
  project] page.
