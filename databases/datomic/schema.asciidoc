=== Define schema for a Datomic database

===== Problem

You need to define how your data will be modelled in Datomic. For example, you might need to model 
users and user groups, and relate the two in some way.

===== Solution

Define user schema attributes. Users have:

* One email address, which must be unique to the database.
* One name, which we index for fast search.
* Any number of roles.

There are three roles: guest, author, and editor.

[source,clojure]
----
(def user-schema
  [{:db/doc "User email address"
    :db/ident :user/email
    :db/valueType :db.type/string
    :db/cardinality :db.cardinality/one
    :db/unique :db.unique/value
    :db/id #db/id[:db.part/db]
    :db.install/_attribute :db.part/db}

   {:db/doc "User name"
    :db/ident :user/name
    :db/valueType :db.type/string
    :db/cardinality :db.cardinality/one
    :db/index true
    :db/id #db/id[:db.part/db]
    :db.install/_attribute :db.part/db}

   {:db/doc "User roles"
    :db/ident :user/roles
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/many
    :db/id #db/id[:db.part/db]
    :db.install/_attribute :db.part/db}

   [:db/add #db/id[:db.part/user] :db/ident :user.roles/guest]
   [:db/add #db/id[:db.part/user] :db/ident :user.roles/author]
   [:db/add #db/id[:db.part/user] :db/ident :user.roles/editor]])
----

Define group schema attributes. Groups have:

* One UUID, which must be unique to the database.
* One name, which we index for fast search.
* Any number of related users.

[source,clojure]
----
(def group-schema
  [{:db/doc "Group UUID"
    :db/ident :group/uuid
    :db/valueType :db.type/uuid
    :db/cardinality :db.cardinality/one
    :db/unique :db.unique/value
    :db/id #db/id[:db.part/db]
    :db.install/_attribute :db.part/db}

   {:db/doc "Group name"
    :db/ident :group/name
    :db/valueType :db.type/string
    :db/cardinality :db.cardinality/one
    :db/index true
    :db/id #db/id[:db.part/db]
    :db.install/_attribute :db.part/db}

   {:db/doc "Group users"
    :db/ident :group/users
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/many
    :db/id #db/id[:db.part/db]
    :db.install/_attribute :db.part/db}])
----

Transact the schema into the database.

[source,clojure]
----
(d/transact (d/connect "datomic:mem://sample-database") (concat user-schema group-schema))
;; -> #<promise$settable_future$reify__5035@13e70a08:
;;      {:db-before datomic.db.Db@f2b3fc89,
;;       :db-after datomic.db.Db@b4dc4877,
;;       :tx-data [#Datum{:e ... :a ... :v ... :tx ... :added true}
;;                 ...],
;;       :tempids {...}}>
----

===== Discussions

Datomic schema is represented as Clojure data, and is added to the database in a transaction, just 
like any other data we would store. The +:db.install/_attribute :db.part/db+ key/value is used by 
the transactor to make the schema available to the rest of the system.

Schema is placed in the +db.part/db+ database partition, which is reserved for schema. All user data
is placed in user partition(s) - either the default of +:db.part/user+ or custom partitions. 
Partitions are useful for optimising how indexes sort data, which is useful for optimising query.

We use namespaces in schema +:db/ident+ values to help us classify entities. Datomic doesn't do 
anything specific with namespaces, and so using them is optional.

Attributes with +:db/valueType :db.type/ref+ can only have other entities as their value(s). We use 
this type to model relationships between entities. 

We also use +:db/valueType :db.type/ref+ and to model enumerations, such as the user roles we 
defined. These enumerations are not actually schema, they are normal entities that have a single 
attribute, +:db/ident+. Datomic allows us to use a shorthand for defining and querying on such enums.

Attributes with +:db/valueType :db.type/ref+ and +:db/unqiue+ values are implicitly indexed, as 
though we had added +:db/index true+ to their definitions.

Datomic does not enforce how attributes are combined for any given entity. Schema only enforces 
that only defined schema can be used, as well as enforcing their type and uniqueness constraints.

Datomic does not enforce which entities are related to on a given +:db/valueType :db.type/ref+ 
attribute; any other entity can be related to. This means that entities can relate to themselves!



===== See Also

