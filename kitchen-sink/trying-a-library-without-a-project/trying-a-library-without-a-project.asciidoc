=== Trying a Library Without a Project

// By Mark Whelan (mrwhelan)

===== Problem

You want to try a library in the REPL without the annoyance of having to create an unwanted project in Leiningen.

===== Solution

Use Ryan Neufeld's +lein-try+ to launch the REPL, along with the library's name. The library's dependencies will be downloaded automatically as needed.

To gain this capability, first make sure you are using Leiningen >= 2.1.3.
Then edit your +~/.lein/profiles.clj+ file. Add the following to the +:plugins+ vector of the +:user+ profile:

[source,clojure]
[lein-try "0.3.0"]

Now you can experience nearly instant gratification with the library of your choice:

[source,console]
----
$ lein try clj-time
Retrieving clj-time/clj-time/0.6.0/clj-time-0.6.0.pom from clojars
Retrieving clj-time/clj-time/0.6.0/clj-time-0.6.0.jar from clojars
nREPL server started on port 58981 on host 127.0.0.1
REPL-y 0.2.1
Clojure 1.5.1
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)

user=> 
----

===== Discussion

Notice that we did not have to give a version number for the library in the example. Leiningen will grab the most recent version.

Of course you can specify a library's version if you like. Just add the number afterward:

[source,console]
----
$ lein try clj-time 0.5.1
#...
user=>
----

For a quick view of usage options, invoke +lein help try+:

[source,console]
----
$ lein help try
Launch REPL with specified dependencies available.

  Usage:

    lein try [io.rkn/conformity "0.2.1"] [com.datomic/datomic-free "0.8.4020.26"]
    lein try io.rkn/conformity 0.2.1
    lein try io.rkn/conformity # This uses the most recent version

  NOTE: lein-try does not require []

Arguments: ([& args])
----

Now let's mention some ways to integrate +lein try+ with a couple of other popular tools.

You may wish to use +lein try+ with Emacs. How? Just set the +inferior-lisp-program+ var in your +*scratch*+ buffer:

[source,lisp]
(setq inferior-lisp-program "lein try tentacles")

Then launch +M-x inferior-lisp+.

Are you a ZSH user? You may have an issue typing +[..]+ in your +lein try+ invocation, since ZSH will try to match the +[..]+ pattern and foil your attempt to use a vector in the call.

Fortunately, you can work around this by temporarily shutting off [] pattern matching in ZSH. Simply put +noglob+ in front of +lein+:

[source,console]
% noglob lein try [io.rkn/conformity "0.2.1"] [com.datomic/datomic-free "0.8.4020.26"]

If you never use [] pattern matching, you can make the problem go away permanently by setting up an alias with +noglob+ in your .zshrc file. The +noglob+ option will then be used every time you call +lein+.

[source,sh]
alias "lein"="noglob lein"

(conclusion)

===== See Also

* Leiningen (xref)
* Managing Projects (xref)
