==== Making a GUI Window

// By John Walker, with extensive modifications by John Jacobsen (@eigenhombre)

==== Problem

You want to make a GUI window with scrollable content.

==== Solution

Though Java's Swing library is the most common way to make Java GUIs
(at least on the desktop), the Seesaw library, which wraps Swing and
provides a more idiomatic and functional interface, is the best tool
for creating GUIs with Clojure.

Swing implements "programmable Look and Feel": the appearance of
various widgets, and their behavior, can be modified, though it is
common to set this to match the platform one is on, for the sake of
maximum usability. Setting the native Look and Feel is accomplished in
Seesaw with the +native!+ function:

[source,clojure]
----
(ns example.seesaw
  (:require [seesaw.core :refer [frame native! pack! show!]]))

(native!)
;; => nil
----

To create our window object, we use +frame+ (which, under the covers, makes a
+JFrame+ Swing object):

[source,clojure]
----
(frame :title "Cooking with Clojure" :content "Hello World")
;; => #<JFrame$Tag$a79ba523 seesaw.core.proxy$javax.swing.JFrame$Tag$a79ba523
;; [frame6,0,19,0x0,invalid,hidden,layout=java.awt.BorderLayout,title=Police,
;; resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,
;; rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,
;; alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],
;; rootPaneCheckingEnabled=true]>
----

Although a frame has been created, nothing appears. In order to
actually display the frame, you must use +show!+:

[source,clojure]
----
(def f (frame :title "Cooking with Clojure"))

(show! f)
;; => #<JFrame$Tag$a79ba523 seesaw.core.proxy$javax.swing.JFrame$Tag$a79ba523
;; [frame6,0,19,0x0,invalid,hidden,layout=java.awt.BorderLayout,title=Police,
;; resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,
;; rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,
;; alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],
;; rootPaneCheckingEnabled=true]>
----

More complicated examples of GUI's in seesaw should have a call to +pack!+, which assigns width and height properties according to its content.  Without such a call, you might have difficulty even finding the window being displayed.

[source,clojure]
----
(-> f pack! show!)
;; => #<JFrame$Tag$a79ba523 [...]
----

You can change anything in the frame using +config!+.

[source,clojure]
----
(config! f :content "Blue skies")
;; => #<JFrame$Tag$a79ba523 seesaw.core.proxy$javax.swing.JFrame$Tag$a79ba523
;; [frame7,0,0,1366x768,hidden,layout=java.awt.BorderLayout,title=Blue skies,resizable,
;; normal,defaultCloseOperation=HIDE_ON_CLOSE,
;; rootPane=javax.swing.JRootPane[,0,0,1366x768,layout=javax.swing.JRootPane$RootLayout,
;; alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],
;; rootPaneCheckingEnabled=true]>
----

Note that the text is now "Blue skies," but that the window is too small to display the entire string. Follow up with a call to +pack!+.

==== Discussion

Since Seesaw is operating on a Swing objects, it is possible to
operate on interfaces regularly created for Java applications. This
implies that interface design can be done with conventional tools, and
that Seesaw can be used for acting on interfaces rather than designing
them.

+config!+ modifies properties in a widget, given a series of keywords
(representing the properties) and the new values following each one.
It is fairly versatile in the sense that it can modify multiple
widgets. For example: 

[source,clojure]
----
(config! f :title "The Weather":content "Sunny in Colorado. A lot of text goes in here.")
(pack! f)

;; or if you have a button that is a child element of f

(config! b :enabled? true :selected? true :text "Press me")
(pack! f)

;; or if you have multiple buttons that are children of f

(config! [b1 b2 b3 b4] :enabled? true :selected? true :text "Press me (or don't!)")
(pack! f)
----

You can consider +show!+ to be shorthand for

[source,clojure]
----
(config! f :visible? true)
----

thus, it is not necessary to call +show!+ after updating a frame. But
you should always make a call to +pack!+.

===== See Also

Seesaw supports a wide variety of GUI tasks -- creation of menus,
display of text and images, scroll bars, radio buttons, check boxes,
multi-paned windows, drag-and-drop, and much more. In addition to the
dozen or so books which have been written about Swing, one could easily
write an entire book on Seesaw. This recipe simply serves as a
starting point for further investigation of the Seesaw library:

* https://github.com/daveray/seesaw[The Seesaw project on GitHub].
