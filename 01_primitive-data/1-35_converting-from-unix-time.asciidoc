[[sec_date_from_unix_timestamp]]
=== Converting a Unix Timestamp to a Date
[role="byline"]
by Steven Proctor

==== Problem

You need to get a +Date+ object from a Unix timestamp.((("dates/times", "converting Unix timestamps")))(((Unix, timestamp)))(((timestamps)))(((functions, from-unix-time)))

==== Solution

When dealing with data from outside systems, many systems will
express a timestamp in Unix time format.  Some areas that you may
encounter this is dealing with certain datastores, parsing out data
from timestamps in log files, or any number of other systems that
have to deal with dates and times across multiple different time zones
and cultures.(((databases, timestamps and)))

Fortunately, with Clojure's ability for nice interoperability with Java,
you have an easy solution at hand:

[source,clojure]
----
(defn from-unix-time
  "Return a Java Date object from a Unix time representation expressed
  in whole seconds."
  [unix-time]
  (java.util.Date. unix-time))
----

This is how you can use the +from-unix-time+ function:

[source,clojure]
----
(from-unix-time 1366127520000)

;; #inst "2013-04-16T15:52:00.000-00:00"
----

==== Discussion

To get a Java +Date+ object from a Unix time object, all you need to
do is construct a new
http://docs.oracle.com/javase/7/docs/api/java/util/Date.html[+java.util.Date+]
object using Clojure's Java interop functionality.(((Clojure, Java interop functionality)))(((range="endofrange", startref="ix_clj")))


If you are already using or wish to use the
https://github.com/clj-time/clj-time[+clj-time+] library, you can use +clj-time+
to obtain a +DateTime+ object from a Unix timestamp:

[source,clojure]
----
(require '[clj-time.coerce :as timec])

(defn datetime-from-unix-time
  "Return a DateTime object from a Unix time representation expressed
  in whole seconds."
  [unix-time]
  (timec/from-long unix-time))
----

And using the +datetime-from-unix-time+ function, you can see you get a
+DateTime+ object back with the correct time:

[source,clojure]
----
(datetime-from-unix-time 1366127520000)

;; #<DateTime 2013-04-16T15:52:00.000Z>
----

You may not need to worry about dates and times being expressed as seconds
very often, but when you do, isn't it nice to know how easy it can be to
get those timestamps into a date format used by the rest of the system?

==== See Also

* <<sec_primitives_dates_current_date>>
* <<sec_date_to_unix_timestamp>>
