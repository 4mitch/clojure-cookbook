=== Executing a System Command
[role="byline"]
by Mark Whelan

==== Problem

You want to send a command to the underlying operating system and get
its output.

==== Solution

Use +clojure.java.shell/sh+ to run a shell command on your local
system.  It will return a map containing the command's output, any
error, and the exit status, available via the :out, :err, and :exit
keys respectively.

[source,clojure]
----
(use '[clojure.java.shell :only [sh]])
(sh "date")
;; -> {:exit 0, :out "Sun Aug 18 09:35:56 EDT 2013\n", :err ""}
----

If your command requires options or arguments, simply add them to the
+sh+ argument list as strings:

[source,clojure]
----
(sh "ls" "-l" "/etc/passwd")
;; -> {:exit 0, :out "-rw-r--r--  1 root  wheel  4962 May 27 07:54 /etc/passwd\n", :err ""}
(sh "ls" "-l" "nosuchfile")
;; -> {:exit 1, :out "", :err "ls: nosuchfile: No such file or directory\n"}
----

==== Discussion

If you're at the REPL, newline characters will be shown instead of
actual linebreaks. To see human-friendly output instead, wrap the
+sh+ command with a +println+. Here's the canonical cowsay example for +sh+,
in which we print only nicely formatted output:

[source,clojure]
----
(println (:out (sh "cowsay" "hello!")))
 ________
< hello! >
 --------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||

;; -> nil
----

Note that this will only work if you have the +cowsay+ program installed
and on the path of your local system).

Sometimes you may want your command to be executed in a directory
other than the current one for your process. Use the :dir
option. If you want to perform multiple operations in the same directory,
you can wrap them using +with-sh-dir+.

[source,clojure]
----
(use 'clojure.java.shell)
;; -> nil
(sh "ls" :dir "/Users")
;; -> {:exit 0, :out "Guest\nShared\ndale\ntucker\n", :err ""}
(with-sh-dir "/Users/tucker"
  (sh "do-backup.sh")
  (sh "du" "-sh" "."))
;; -> {:exit 0, :out " 11G\t.\n", :err ""}
----

Similarly, you can override environment variables for +sh+ with
the :env option and a map, or use +with-sh-env+ and a map to wrap a command
or group of commands.

[source,clojure]
----
(use 'clojure.java.shell)
;; -> nil
(sh "printenv" "HOME")
;; -> {:exit 0, :out "/Users/tucker\n", :err ""}
(sh "printenv" "HOME" :env {"HOME" "/Users/dale"})
;; -> {:exit 0, :out "/Users/dale\n", :err ""}
(with-sh-env {"HOME" "/Users/dale"} (sh "printenv" "HOME"))
;; -> {:exit 0, :out "/Users/dale\n", :err ""}
----

[NOTE] When running your program directly (not inside a REPL), you may
notice that it will fail to exit immediately after it does its
work. This is because +sh+ is implemented using a +future+. A +future+
will launch a separate pooled thread which, even after realization,
will linger in the JVM an indeterminate amount of time, during which
the JVM will not naturally terminate. Invoke +shutdown-agents+ or
+System/exit+ directly to shut down the future thread pool or forcibly
terminate the JVM to avoid this issue.

==== See Also

* +clojure.core/future+
* SSH (xref)
* See the Conch library ( https://github.com/Raynes/conch ) for another approach to shelling out in Clojure.
