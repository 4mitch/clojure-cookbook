[[sec_local_io_get_local_resource]]
=== Including and Accessing Resource Files in a Clojure Project
[role="byline"]
by John Jacobsen with help from John Cromartie and Alex Petrov

==== Problem

You want to include a resource files from the classpath in your
Clojure project.

==== Solution

Place the resource files in the +resources/+ directory at the top level
of your Leiningen project.

For example, a file +resources/people.edn+:

[source,clojure]
----
[{:first-name "John", :last-name "McCarthy", :language "Lisp"}
 {:first-name "Guido", :last-name "Van Rossum", :language "Python"}
 {:first-name "Rich", :last-name "Hickey", :language "Clojure"}]
----

Pass the the name of the file (relative to the resources directory) to
the +clojure.java.io/resource+ function to obtain an instance of
+java.io.File+, which you can then read as you please (for example,
using the +slurp+ function).

[source,clojure]
----
(ns process-people
  (:require [clojure.java.io :as io]))

(->> "people.edn"
     io/resource
     slurp
     read-string
     (map :language)))

;; -> (Lisp Python Clojure)
----

==== Discussion

Resources are commonly used to store any kind of file that is
logically a part of your application, but is not code.

Resources are loaded via the Java classpath, just like Clojure code
is. Leiningen puts the +resources/+ directory on the classpath
automatically whenever it starts a Java process, and when packaged,
the contents of +resources/+ are copied to the root of any emitted JAR
files.

You can also specify an alternative (or additional) resource directories using the
`:resources-paths` key in your `project.clj`.

.project.clj
[source,clojure]
----
:resource-paths ["my-resources" "src/other-resources"]
----
