=== Parallelizing File Processing with Reducers
[role="byline"]
by Edmund Jackson

==== Problem

You want to use Clojure's reducers on a file to realize parallel
processing without loading the file into memory.

==== Solution

Use the +Iota+ library ( https://github.com/thebusby/iota) in
conjunction with the +filter+, +map+ and +fold+ functions from the
Clojure Reducers library in the +clojure.core.reducers+ namespace.

For example, to count the words in a very large file:

[source,clojure]
----
(ns word-count-with-iota
  "Give the word count for a text file using iota and reducers"
  (:require [iota                  :as io]
            [clojure.core.reducers :as r]
            [clojure.string        :as str]))


;; word counting functions
(defn count-map
  "Returns a map of words to occurence count in the given string"
  [s]
  (reduce (fn [m w] (update-in m [w] (fnil (partial inc) 0))) {} (str/split s #" ")))

(defn add-maps
  "Returns a map where each key is the sum of vals of that key in m1 and m2."
  ([] {}) ;; Necessary base-case for use as combiner in fold
  ([m1 m2]
     (reduce (fn [m [k v]] (update-in m [k] (fnil (partial + v) 0))) m1 m2)))


;; Main file processing
(defn keyword-count
  "Returns a map of the word counts"
  [filename]
  (->> (iota/seq filename)
       (r/filter identity)
       (r/map count-map)
       (r/fold add-maps)))
----

==== Discussion

The Iota library creates sequences from files on the local file
system. Unlike the purely lazy sequences produced from something like
+file-seq+, the sequences returned by Iota are optimized for use with
Clojure's reducers library, which uses the Java fork/join framework
under the hood to provide efficient parallel processing.

The +keyword-count+ function first creates a reducible sequence of
lines in the file and filters out blank lines (using the +identity+
function to eliminate nil values from the sequence). Then, it applies
the +count-map+ function in parallel, and finally aggregates the
results by folding with the +add-maps+ function.

Under the hood, Iota memory maps the file to prevent it having to be
loaded into memory at once, which allows you to process huge files.
