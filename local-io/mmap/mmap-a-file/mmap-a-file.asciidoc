[[sec_local_io_mmap]]
==== Memory-map a file for reading

// By Alan Busby (thebusby)

===== Problem

You want to memory-map a file.

===== Solution

As java.nio.MappedByteBuffer can't exceed the range of an Integer, define the number of bytes to be stored in each buffer.

[source,clojure]
----
(def ^:private bytes-per-map 
  "The number of bytes a single MappedByteBuffer will store"
  java.lang.Integer/MAX_VALUE)
----

Define an opaque type to simplify accessing and closing the buffer. 

[source,clojure]
----
(deftype Mmap [fis fc maps]  
  clojure.lang.Indexed 
  (nth [this i] (get maps i))
  (nth [this i not-found] (get maps i not-found))

  clojure.lang.Counted
  (count [this] (.size fc))

  java.io.Closeable
  (close 
    [this]
     (do   
       (.close fc)
       (.close fis))))
----

Define a method to create this new opaque type from a filename.

[source,clojure]
----
(defn get-mmap [^String filename]
  "Provided a filename, mmap the entire file, and return an opaque type to allow further access."
  (let [fis  (java.io.FileInputStream. filename)
        fc   (.getChannel fis)
        size (.size fc)]
    (Mmap. fis 
           fc 
	   (mapv #(mmap % (min (- size %)	
                               bytes-per-map)) 
                         (range 0 size bytes-per-map)))))
----

Provide a method to read from the Memory-mapped file.

[source,clojure]
----
(defn get-bytes [mmap pos n]
  "Retrieve n bytes from mmap at position pos"
  (let [get-chunk   #(nth mmap (int (/ % bytes-per-map)))
        end         (+ pos n)
        chunk-term  (-> pos
                        (/ bytes-per-map)
                        int
                        inc
                        (* bytes-per-map))
        read-size   (- (min end chunk-term) pos)
        start-chunk (get-chunk pos)
        end-chunk   (get-chunk end)
        buf         (byte-array n)]
    (locking start-chunk 
      (.position start-chunk (mod pos bytes-per-map))
      (.get start-chunk buf 0 read-size))
    (if (not= start-chunk end-chunk)
      (locking end-chunk 
        (.position end-chunk 0)
        (.get end-chunk buf read-size (- n read-size))))
    buf))
----

