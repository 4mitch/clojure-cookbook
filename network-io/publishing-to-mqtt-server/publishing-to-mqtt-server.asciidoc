=== Publish to MQTT Broker
// By Sandeep Nangia (nangia)

===== Problem

You want to publish some messages using MQTT protocol.

===== Solution

You use https://github.com/clojurewerkz/machine_head[Machine Head],
a Clojure library that is a thin layer over
http://www.eclipse.org/paho/[Paho], a Java library to communicate with a MQTT
broker. In order to communicate via MQTT, you need to have an existing MQTT 
broker implementation. Example implementations are 
http://mosquitto.org/[Mosquitto], Websphere, 
http://www.rabbitmq.com/mqtt.html[RabbitMQ] amongst others. In this recipe, 
you are going to use the test broker provided at tcp://test.mosquitto.org:1883.

Here is the project file with appropriate dependencies.

.project.clj
[source,clojure]
----
(defproject mqttpublisher "0.1.0-SNAPSHOT"
  :dependencies [[org.clojure/clojure "1.5.1"]
                 [clojurewerkz/machine_head "1.0.0-beta1"]]
  :main mqttpublisher.core)
----

And here is the 'core.clj' with the code for publishing MQTT messages.

.core.clj
[source,clojure]
----
(ns mqttpublisher.core
  (:require [clojurewerkz.machine-head.client :as mh]))

(defn connect-and-publish [broker-addr client-id topic]
  (let [qos 2
        retained false
        conn  (mh/connect broker-addr client-id)]
    (if (mh/connected? conn)
      (do (dotimes [n 5]
            (let [payload (str "msg" n)]
              (mh/publish conn topic payload qos retained)
              (println "published " payload)))
          (mh/disconnect conn)))))

(defn -main[] 
  (connect-and-publish "tcp://test.mosquitto.org:1883" (mh/generate-id)
                       "SNControlNetwork/devices/device1"))
----


===== Discussion

http://mqtt.org[MQTT] is an open, extremely lightweight publish/subscribe 
messaging protocol. It is useful for connections where bandwidth is at premium and/or connections are unreliable e.g. for machine to machine (M2M) communication. 
While AMQP protocol excels at various scenarios for business messaging,
MQTT is usually the choice for smaller payloads and last mile connectivity (think 
"Internet of things")
as it is simple to implement in hardware.

The protocol defines three possible QoS values 0, 1 and 2 correspond to "fire and 
forget", "at least once", "exactly once" qualities of service. QoS parameters 1 and 2
require persistent storage on the client so as to save the message until
acknowledgement arrives. In the above recipe, the default persistence
implementation provided by the library.

In the above code, a function +connect-and-publish+ establishes thme connection
with the broker using +connect+ function. It then checks if connection is 
established  with +connected?+ and then publishes a payload 5 times in 
succession and then disconnects. 

In the +-main+ function, the broker address for a test server
 (i.e. 'test.mosquitto.org' at TCP/IP port 1883) is provided and
 a unique client address generated using 
+generate-id+. The payload is sent to a topic 'SNControl/devices/device1' which
is the typical way topics are hierarchically defined. 

The above code publishes message using +retained+ as false. In case +retained+ is set
as true the broker will remember the last known good message of the topic.
So when the subscribers connect, they are given the last known
good message by the broker and they do not have to wait to receive the first
message. 


===== See Also

* The details on MQTT protocol at http://mqtt.org/
* https://github.com/clojurewerkz/machine_head[Machine_Head] library
* http://clojuremqtt.info/[Machine Head Documentation]
* Eclipse Paho library at http://www.eclipse.org/paho/
* Mosquitto, an open source message broker that implements MQTT 
protocol at http://mosquitto.org/
* http://www.redbooks.ibm.com/abstracts/sg248054.html[Building Smarter Planet 
Solutions with MQTT and IBM WebSphere MQ Telemetry, An IBM Redbooks publication] explains MQTT in more details. 
* http://www.youtube.com/watch?v=s9nrm8q5eGg[A Humourous and Informative TED talk by Andy Stanford-Clark, one of the inventors of MQTT, on the potential uses of MQTT]
* http://blip.tv/eclipse-videos/getting-started-with-mqtt-2-6392905[Getting started with MQTT]





