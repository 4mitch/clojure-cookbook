[[sec_websocket_server]]
=== Creating a WebSocket Server
[role="byline"]
by Kevin J. Lynagh

==== Problem

You want to use WebSockets to setup a message-oriented, bidirectional
socket between two servers or a server and web browser.

==== Solution

Use the
https://github.com/lynaghk/jetty7-websockets-async[+jetty7-websockets-async+]
library to create WebSocket connections using Jetty and +core.async+.

Before starting, add `[ring/ring-jetty-adapter "1.2.1"]`,
`[org.clojure/core.async "0.1.242.0-44b1e3-alpha"]` and
`[com.keminglabs/jetty7-websockets-async "0.1.0"]` to your project's
dependencies, or start a REPL using lein-try:

[source,console]
----
lein try ring/ring-jetty-adapter \
         org.clojure/core.async \
         com.keminglabs/jetty7-websockets-async
----

Here's a simple WebSocket server that runs side-by-side with a
standard Ring HTTP handler:

[source,clojure]
----
(require '[com.keminglabs.jetty7-websockets-async.core :refer [configurator]]
         '[clojure.core.async :refer [chan go >! <!]]
         '[ring.adapter.jetty :refer [run-jetty]])

(defn http-handler
  [req]
  {:response 200 :body "HTTP hello" :headers {}})

(def ws-channel (chan))

(def ws-configurator
  (configurator ws-channel {:path "/"}))

(def server
  (run-jetty http-handler {:configurator ws-configurator
                           :port 8090, :join? false}))

(go (loop []
      (let [ws-req (<! ws-channel)]
        (>! (:in ws-req) "Hello new WebSocket client!")
        (recur))))
----

Use +com.keminglabs.jetty7-websockets-async.core/connect!+ to attach a
channel to a WebSocket connection to a remote server.

[source, clojure]
----
(require '[com.keminglabs.jetty7-websockets-async.core :refer [connect!]])

(def ws-client (chan))

(connect! ws-client "ws://localhost:8090")

(go (loop []
      (let [ws-req (<! ws-client)]
        (>! (:in ws-req) "Hello remote websocket server!")
        (recur))))
----

==== Discussion

As you'd expect from its name, the +jetty7-websockets-async+ library
allows you to use Jetty 7 to speak WebSockets---both as a client and
as a server. The API for both cases is symmetric; you create a
+core.async+ channel and then register it with a path on a Jetty server
or connect it to a remote address (or both!). Once a connection is
established (i.e., a WebSocket client has connected to your server or
*you* have connected to a websocket server), a request map will be
provided on the channel, containing the following keys:

* +:uri+ - the string URI on which the connection was made
* +:conn+ - the underlying Jetty7 websocket connection
  (http://download.eclipse.org/jetty/stable-7/apidocs/org/eclipse/jetty/websocket/WebSocket.Connection.html[Jetty
  WebSocket JavaDoc]).
* +:in+ - a +core.async+ channel where you can put string messages
* +:out+ - a +core.async+ channel whence string messages

The in and out channels will be closed when the websocket disconnects.

==== See Also

* See <<sec_core_async>> for more information on +core.async+.
