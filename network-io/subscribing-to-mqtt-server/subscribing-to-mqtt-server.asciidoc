=== Subscribe to MQTT Broker
// By Sandeep Nangia (nangia)

===== Problem

The previous recipe describes how to publish messages to a 
http://mqtt.org[MQTT] broker. The problem
dealt here is to subscribe to the 
MQTT messages being published by another client.

===== Solution

You use https://github.com/clojurewerkz/machine_head[Machine Head], a Clojure
library built on top of http://www.eclipse.org/paho/[Paho]. As in previous
recipe, you need to have a working broker implementation. In this receipe,
http://mosquitto.org/[Mosquitto] will be used for illustration.


Add this to your dependencies. 

[source,clojure]
----
[clojurewerkz/machine_head "1.0.0-beta1"]
----

You first define callback handler +message-handler+ that is called
whenever a message arrives from the broker. To connect to the broker,
use the +connect+ method from Machine Head library providing it the broker address
and client id (generated using +generate-id+). Check that the connection
has been established using +connected?+ method. The +subscribe-with-qos+ method
needs to be provided as parameters the connection, vector of topics to subscribe 
to, a vector corresponding to QoS parameters to use and a message handler (defined earlier). Of course, your internet must be working for the connections and 
subscriptions to work.


[source,clojure]
----
(ns mqttsubscriber.core
  (:require [clojurewerkz.machine-head.client :as mh]))

(defn message-handler [topic meta payload]
  (let [p (apply str (map char payload))]
    (println "received " p "on topic " topic)))
  
(defn connect-and-subscribe [broker-addr topics]
  (let [qosvec (vec (repeat (count topics) 2));all with same qos
        conn-sub (mh/connect broker-addr (mh/generate-id))]
    (if (mh/connected? conn-sub)
      (do 
        (mh/subscribe-with-qos conn-sub topics qosvec message-handler)
        (Thread/sleep 15000)
        (mh/disconnect conn-sub)))))

(defn -main[] 
  (connect-and-subscribe "tcp://test.mosquitto.org:1883"
                       ["SNControlNetwork/devices/device1"]))
----

Now call the +-main+ method to establish connection and subscribe to messages in REPL 
or run it using 'lein run'.


[source,clojure]
----
(-main)
----

===== Discussion

For more description regarding MQTT protocol, see previous recipe for publishing to
MQTT broker. Note that zero, one or many subscribers can potentially connect to a topic. 

While subscribing to messages, wild cards can be used in topic names. This allows
subscription to multiple topics. This is how wild cards are used:

* / is used as a separator.
* + is the single-level wild-card and can appear anywhere in the string.
* # is a multilevel wild card needs to appear at the end of the string.

For example, these subscriptions are possible:

* "SNControl/#" : any device under "SNControl/Florida". So "SNControl/Florida/device1/sensor1", "SNControl/Florida/device1/sensor2" and "SNControl/California/device1" will all match.
* "SNControl/+/device1" : any "device1" in states under domain "SNControl". So "SNControl/Florida/device1" and "SNControl/California/device1" will match.
*  "SNControl/\+/+/sensor1" will match "SNControl/Florida/device1/sensor1" and 
"SNControl/Florida/device2/sensor1"

 
You can test out this subscription recipe with the recipe for publication of messages shown earlier. Run this code first and then start the publisher and you 
should be able to see the payload from the publisher.

While the above code fragment just prints the incoming messages, you could 
potentially use the messages in some other way e.g. triggering some actions based
on an alarm that the code has received.


===== See Also

* The details on MQTT protocol at http://mqtt.org/
* http://clojuremqtt.info/[Machine Head Documentation] of the https://github.com/clojurewerkz/machine_head[Machine_Head] library
* http://www.eclipse.org/paho/[Eclipse Paho library], the Java library, that
Machine Head uses under the hood to communicate using MQTT. 
* Mosquitto, an open source message broker that implements MQTT 
protocol at http://mosquitto.org/
* http://www.redbooks.ibm.com/abstracts/sg248054.html[Building Smarter Planet 
Solutions with MQTT and IBM WebSphere MQ Telemetry, An IBM Redbooks publication] explains MQTT in more details. 
* The http://www.youtube.com/watch?v=s9nrm8q5eGg[TED talk] by Andy Stanford-Clark, one of the inventors of MQTT, is a humourous
and informative session on how MQTT can be used.

